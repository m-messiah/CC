group compilerTree;

program(e,i,s) ::= <<
.class public program
.super java/lang/Object

; standard initializer (calls java.lang.Object's initializer)
;
.method public \<init\>()V
    aload_0
    invokenonvirtual java/lang/Object/\<init\>()V
    return
.end method

; main()
;
.method public static main([Ljava/lang/String;)V
	.limit stack <s>
	.limit locals <i>
	; create input reader
	new java/io/InputStreamReader
	dup
	getstatic   java/lang/System/in Ljava/io/InputStream;
	invokenonvirtual    java/io/InputStreamReader.\<init\>(Ljava/io/InputStream;)V
	astore_1
	new java/io/BufferedReader
	dup
	aload_1
	invokenonvirtual    java/io/BufferedReader.\<init\>(Ljava/io/Reader;)V
	astore_2
	
	<e>
	; done
    return
.end method
>>

block(e) ::= <<
;begin
<e;separator="\n">
;end
>>

print(e) ::= <<
; push System.out onto the stack
getstatic java/lang/System/out Ljava/io/PrintStream;
<e>
invokevirtual java/io/PrintStream/println(D)V
>>

expr(e) ::= "	<e>"

add(e1,e2) ::= <<
<e1>
<if(e2)>
<e2>
dadd
<endif>
>>
sub(e1,e2) ::= <<
<if(e2)>
<e1>
<e2>
dsub
<else>
<e1>
dneg
<endif>
>>


mul(e1,e2) ::= <<
<e1>
<e2>
dmul
>>

div(e1,e2) ::= <<
<e1>
<e2>
ddiv
>>

pow(e1,e2) ::= <<
<e1>
<e2>
invokestatic    java/lang/Math.pow(DD)D
>>

factor(e) ::= "<e>"

atom(e) ::= "<e>"

number(n) ::= "ldc2_w <n>"
inumber(n) ::= <<
ldc_w <n>
i2d
>>

get(i,v) ::= <<
dload <i> ; <v>
>>

incr(i,v) ::= <<
dload <i> ;<v>++
dconst_1
dadd
dstore <i> 

>>

decr(i,v) ::= <<
dload <i> ;<v>--
dconst_1
dsub
dstore <i>

>>



set(i,e,v) ::= <<
<e>
dstore <i> ; <v>
>>

read() ::= <<
aload_2
invokevirtual   java/io/BufferedReader.readLine()Ljava/lang/String;
invokestatic    java/lang/Double.parseDouble(Ljava/lang/String;)D
>>

dowhile(cond,b,lab) ::= <<
L<lab>:
<b>
<cond>
ifgt L<lab>

>>


while(cond,b,lab) ::= <<
L<lab>:
<cond>
ifle L<lab>_2
<b>
goto L<lab>
L<lab>_2:

>>

for(before,cond,after,b,lab) ::= <<
<before>
L<lab>:
<cond>
ifle L<lab>_2
<b>
<after>
goto L<lab>
L<lab>_2:

>>


iff(cond,thn,els,lab) ::= <<
<cond> 
ifgt L<lab>
<els>
goto L<lab>_2
L<lab>: <thn>
L<lab>_2: 
>>

or(b1,b2) ::= <<
<b1>
<b2>
ior

>>

and(b1,b2) ::= <<
<b1>
<b2>
iand

>>

not(b1) ::= <<
ldc_w 1
<b1>
isub
>>

ge(b1,b2) ::= <<
<b1>
<if(b2)>
<b2>

<else>
dconst_0

<endif>
dcmpl
i2d
dconst_1
dneg
dcmpl

>>
gt(b1,b2,lab) ::= <<
<b1>
<b2>
dcmpl
dup
ifge L<lab>
bipush 1
iadd
L<lab>:
>>

le(b1,b2) ::= <<
<b1>
<b2>
dcmpl
ineg
i2d
dconst_1
dneg
dcmpl

>>

lt(b1,b2,lab) ::= <<
<b1>
<b2>
dcmpl
ineg
dup
ifge L<lab>
bipush 1
iadd
L<lab>:
>>


eq(b1,b2,lab) ::= <<
bipush 1
<b1>
<b2>
dcmpl
dup
ifge L<lab>
ineg
L<lab>: isub

>>

ne(b1,b2) ::= <<
<b1>
<b2>
dcmpl
dup
ifge L<lab>
ineg
L<lab>:
>>
