group calcTree;

calc(e,i) ::= <<
.class public calc5
.super java/lang/Object

; standard initializer (calls java.lang.Object's initializer)
;
.method public \<init\>()V
    aload_0
    invokenonvirtual java/lang/Object/\<init\>()V
    return
.end method

; main()
;
.method public static main([Ljava/lang/String;)V
	.limit stack 50
	.limit locals <i>
	; create input reader
	new java/io/InputStreamReader
	dup
	getstatic   java/lang/System/in Ljava/io/InputStream;
	invokenonvirtual    java/io/InputStreamReader.\<init\>(Ljava/io/InputStream;)V
	astore_1
	new java/io/BufferedReader
	dup
	aload_1
	invokenonvirtual    java/io/BufferedReader.\<init\>(Ljava/io/Reader;)V
	astore_2
	; push System.out onto the stack
	getstatic java/lang/System/out Ljava/io/PrintStream;
	
	<e; separator="\n">
	; done
    return
.end method
>>

create(v1,s1) ::= "<v1> = <s1>"

print(e) ::= <<
<e>
invokevirtual java/io/PrintStream/println(D)V
>>

expr(e) ::= "	<e>"

add(e1,e2) ::= <<
<e1>
<if(e2)>
<e2>
dadd
<endif>
>>
sub(e1,e2) ::= <<
<if(e2)>
<e1>
<e2>
dsub
<else>
<e1>
dneg
<endif>
>>


mul(e1,e2) ::= <<
<e1>
<e2>
dmul
>>

div(e1,e2) ::= <<
<e1>
<e2>
ddiv
>>

pow(e1,e2) ::= <<
<e1>
<e2>
invokestatic    java/lang/Math.pow(DD)D
>>

factor(e) ::= "<e>"

atom(e) ::= "<e>"

number(n) ::= "ldc2_w <n>"
inumber(n) ::= "ldc2_w <n>.0"
get(i,v) ::= <<
; <v>
dload <i>
>>

set(i,e,v) ::= <<
<e>
; <v>
dstore <i>
>>

read() ::= <<
aload_2
invokevirtual   java/io/BufferedReader.readLine()Ljava/lang/String;
invokestatic    java/lang/Double.parseDouble(Ljava/lang/String;)D
>>
